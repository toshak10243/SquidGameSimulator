package gui;

import logic.GameManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class GameSimulationUI extends JFrame {

    public GameSimulationUI() {
        setTitle("Squid Game Simulation - Round");
        setSize(800, 600);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // --- Background Panel ---
        JPanel backgroundPanel = new JPanel();
        backgroundPanel.setBackground(Color.BLACK);
        backgroundPanel.setLayout(new BoxLayout(backgroundPanel, BoxLayout.Y_AXIS));
        backgroundPanel.setBorder(BorderFactory.createEmptyBorder(30, 100, 30, 100));
        setContentPane(backgroundPanel);

        // --- Logo ---
        ImageIcon logoIcon = new ImageIcon("resources/images/logo.png");
        Image scaledImage = logoIcon.getImage().getScaledInstance(300, 100, Image.SCALE_SMOOTH);
        JLabel logoLabel = new JLabel(new ImageIcon(scaledImage));
        logoLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        backgroundPanel.add(logoLabel);
        backgroundPanel.add(Box.createRigidArea(new Dimension(0, 40)));

        // --- Button ---
        JButton startButton = new JButton("START GAME SIMULATION");
        startButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        startButton.setFont(new Font("Arial Black", Font.PLAIN, 18));
        startButton.setBackground(new Color(230, 0, 40));
        startButton.setForeground(Color.WHITE);
        startButton.setFocusPainted(false);
        startButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        startButton.setPreferredSize(new Dimension(300, 60));
        startButton.setMaximumSize(new Dimension(400, 60));
        startButton.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2, true));

        // Hover effect
        startButton.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent e) {
                startButton.setBackground(new Color(255, 80, 100));
            }

            public void mouseExited(MouseEvent e) {
                startButton.setBackground(new Color(230, 0, 40));
            }
        });

        // Button Action
        startButton.addActionListener(e -> {
            int[] result = GameManager.simulateRoundWithResult(); // new method returns [eliminated, advanced]

            JOptionPane.showMessageDialog(this,
                    "Simulation Complete!\n" +
                    "Eliminated: " + result[0] + "\n" +
                    "Advanced: " + result[1],
                    "Round Results",
                    JOptionPane.INFORMATION_MESSAGE);
        });

        backgroundPanel.add(startButton);
        backgroundPanel.add(Box.createRigidArea(new Dimension(0, 50)));

        // --- Game Info ---
        String[] infoLines = {
            "• 456 contestants risk their lives to win a life-changing cash prize.",
            "• All players must participate in a series of 12 childhood-inspired survival games.",
            "• Failure to complete a game or breaking rules leads to immediate elimination.",
            "• Eliminated players are permanently removed, increasing the prize pool.",
            "• Only one player survives till the end and claims the entire reward."
        };

        Font infoFont = new Font("Arial", Font.PLAIN, 14);
        Color infoColor = Color.WHITE;

        for (String line : infoLines) {
            JLabel label = new JLabel(line);
            label.setFont(infoFont);
            label.setForeground(infoColor);
            label.setAlignmentX(Component.CENTER_ALIGNMENT);
            backgroundPanel.add(label);
        }

        setVisible(true);
    }
}
